// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package recorder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecorderClient interface {
	StartRecord(ctx context.Context, in *StartRecordReq, opts ...grpc.CallOption) (*StartRecordRes, error)
	StopRecord(ctx context.Context, in *StopRecordReq, opts ...grpc.CallOption) (*StopRecordRes, error)
}

type recorderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderClient(cc grpc.ClientConnInterface) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) StartRecord(ctx context.Context, in *StartRecordReq, opts ...grpc.CallOption) (*StartRecordRes, error) {
	out := new(StartRecordRes)
	err := c.cc.Invoke(ctx, "/recorder.Recorder/StartRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) StopRecord(ctx context.Context, in *StopRecordReq, opts ...grpc.CallOption) (*StopRecordRes, error) {
	out := new(StopRecordRes)
	err := c.cc.Invoke(ctx, "/recorder.Recorder/StopRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
// All implementations must embed UnimplementedRecorderServer
// for forward compatibility
type RecorderServer interface {
	StartRecord(context.Context, *StartRecordReq) (*StartRecordRes, error)
	StopRecord(context.Context, *StopRecordReq) (*StopRecordRes, error)
	mustEmbedUnimplementedRecorderServer()
}

// UnimplementedRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (*UnimplementedRecorderServer) StartRecord(context.Context, *StartRecordReq) (*StartRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecord not implemented")
}
func (*UnimplementedRecorderServer) StopRecord(context.Context, *StopRecordReq) (*StopRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecord not implemented")
}
func (*UnimplementedRecorderServer) mustEmbedUnimplementedRecorderServer() {}

func RegisterRecorderServer(s *grpc.Server, srv RecorderServer) {
	s.RegisterService(&_Recorder_serviceDesc, srv)
}

func _Recorder_StartRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).StartRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recorder.Recorder/StartRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).StartRecord(ctx, req.(*StartRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_StopRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).StopRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recorder.Recorder/StopRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).StopRecord(ctx, req.(*StopRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recorder.Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRecord",
			Handler:    _Recorder_StartRecord_Handler,
		},
		{
			MethodName: "StopRecord",
			Handler:    _Recorder_StopRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder/recorder.proto",
}
